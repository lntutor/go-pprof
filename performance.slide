Golang Performance

How to optimize your Go applications
21 Feb 2016
Tags: golang, performance, pprof, benkmarking

Loi Nguyen
Software Engineer, Chotot
loinguyen@chotot.vn
http://chotot.com

* Agenda
- Benchmarking
- Profiling
- Race Detector
- Using pprof Over HTTP
- Tracers
- Performance Tips
- Monitoring

* Benchmarking

Benchmarks are created in a similar way as tests

  BenchmarkXxxx(b *testing.B)

Benchmarks are run using *go*test* and passing a valid regular expression to the *-bench* flag.

  go test -bench=.


* Benchmark 1 - Concat string
.code /runtime/string/benchmark_test.go /^func BenchmarkConcat/,/^}/
.code /runtime/string/benchmark_test.go /^func BenchmarkBuffer/,/^}/

We will see results in the format

  BenchmarkConcat-4   	 1000000	        106158 ns/op
  BenchmarkBuffer-4   	100000000	        13.9 ns/op

* Benchmark 1 - Concat string
Tip:

- Use bytes.Buffer to concat string

* Comparing Benchmarks
benchmp can be used to compare and show differeneces between benchmark runs.

  go get golang.org/x/tools/cmd/benchcmp

First we output the results of our benchmark runs

  go test -bench=. > old.txt
  go test -bench=. > new.txt

Then we can pass these outputs to benchcmp.

  benchcmp old.txt new.txt

Output.

  benchmark             old ns/op     new ns/op     delta
  BenchmarkConcat-4     83038         97497         +17.41%
  BenchmarkBuffer-4     15.6          13.8          -11.54%


* Benchmark 2 - Sieve of Eratosthenes

Let's write a program of Sieve of Eratosthenes.

.image images/sieve.gif _ 600


* Benchmark 2 - Sieve of Eratosthenes

Example N = 10:
Return array:

    0: false
    1: false
    2: true
    3: true
    4: false
    5: true
    6: false
    7: true
    8: false
    9: false

* Benchmark 2 - Sieve of Eratosthenes

Which option is better?

Wide protected region:

.play runtime/mutex/prime.go /WIDE/,/Unlock/

Narrow protected region:

.play runtime/mutex/prime.go /NARROW/,/}/

* Benchmark 2 - Sieve of Eratosthenes
  go test -bench=.

.image images/narrow_vs_wide.png _ 800

* Benchmark 1 - Sieve of Eratosthenes
Tip:

- Use narrow lock over wide lock

* Profiling

Profiling can be performed using the pprof tool.

  go tool pprof

*OS*X*

Kernel Patch - Patches the OS X kernel to report accurate values
[[http://godoc.org/code.google.com/p/rsc/cmd/pprof_mac_fix]]

Dependencies - Install *ghostscript* and *graphviz*

*Tips*

- Use  --nodefraction=0.15 to tell pprof to ignore nodes that account for < 15% of the samples
- Use gcflags="-s" to prevent the compiler from inlining methods.
- Use gcflags="-m" to see more detailed information about what variables are being moved to the heap, what's being inlined etc.


* CPU Profiler

Generate a cpu profile, this will also output an executable file of our test suite to be used by pprof.

  go test -gcflags="-m" -run=none -bench=BenchmarkConcat -cpuprofile=cpu.prof

Now generate a pdf of the profile (text, svg, web, also supported).

  go tool pprof -pdf cpu.prof > cpu.pdf

* CPU Profiler

.image images/performance/cpuprof.png _ 768

* Memory Profiler

The memory profiler allows you to find where in your application your memory is being allocated.

Generate a memory profile

  go test -run=none -bench=BenchmarkConcat -memprofile=mem.prof

Now generate a pdf of the profile.

  go tool pprof -pdf mem.prof > mem.pdf

* Memory Profiler

.image images/performance/memprof.png _ 1024

* Block Profiler

The block profiler allows you to find where your application spends its time blocking.

Generate a block profile

  go test -run=none -bench=BenchmarkConcat -blockprofile=block.prof

Now generate a pdf of the profile.

  go tool pprof -pdf block.prof > block.pdf

* Block Profiler

.image images/performance/blockprof.png 500 _

* Race Detector

Be in the habit of running your tests with the *-race* flag. This will cause panics and give you a stack trace and explanation explaining where your data race was detected.

  go test -race

.play runtime/mutex/prime.go /RACE/,/}/
.image images/race_detector.png _ 800

* Using pprof Over HTTP

The net/http/pprof provides a mechanism to expose pprof data via http

  import _ "net/http/pprof"

You can then use the pprof tool against the running server

  # CPU profile (30s window)
  go tool pprof http://localhost:8080/debug/pprof/profile

  # Heap Profile
  go tool pprof http://localhost:8080/debug/pprof/heap

  # Blocking profile
  go tool pprof http://localhost:8080/debug/pprof/block

* Tracers

Go provides an additional tool for profiling which are called tracers. These environment variables will output debug information as your application runs.

- Garbage Collector Trace
  GODEBUG=gctrace=1 ./app

Dave Cheney has written a tool for visualizing the output of the GC tracer:
[[http://dave.cheney.net/2014/07/11/visualising-the-go-garbage-collector]]

- Memory Allocator Trace
  GODEBUG=allocfreetrace=1 ./app

- Scheduler Trace
  GODEBUG=schedtrace=1000 ./app

* Tracers Visualize
  go get -u -v github.com/davecheney/gcvis
  GODEBUG=gctrace=1 gcvis ./app

.image images/gvis.png _ 1000

* Performance Tips

- Reduce allocations - This reduces execution time as well as pressure on the GC for data allocated on the heap. Freelists are great for this. sync.Pool is a freelist available in the stdlib.
- Preallocate Slices - If you know the typical size for a slice, preallocate it with a backing array of that size.
- When switching between []byte and string try to stay with []byte as long as possible and convert to string at the end. These conversions will be free / cheaper in the future.
- Use streams / io.Reader & io.Writer - Working with io.Reader & io.Writer can reduce allocation reading in an entire buffer.
- Use json.Encoder - This will allow you to enc.Decode / enc.Encode an io.Reader and io.Writer respectively. It removes the need to have the entire document in memory.
- Don't overruse pointers - If a variable escapes a function it will be moved to the heap, which adds pressure to the GC.


* Performance Tips

- Minimize channel usage - Synchronization can be expensive.
- Minimize locks - These cause contention between resources waiting for the lock.


* Additional Resources

A great article on profiling and tracers can be found here:
[[https://software.intel.com/en-us/blogs/2014/05/10/debugging-performance-issues-in-go-programs]]

The Go blog also has a great article on profiling
[[http://blog.golang.org/profiling-go-programs]]

Go performance
[[https://github.com/erikstmartin/go-performance]]
